(()=>{"use strict";var n={453:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".controls{margin:0 auto}@media screen and (max-width: 1440px){.controls{max-width:450px}}@media screen and (max-width: 1270px){.controls{max-width:800px}}@media screen and (max-width: 840px){.controls{max-width:600px}}@media screen and (max-width: 640px){.controls{max-width:400px}}.controls .logo{font-size:2.8rem;color:#b58863}.controls .instruct{font-size:1.2rem;margin-bottom:.8rem}@media screen and (max-width: 640px){.controls .instruct{font-size:1rem}}.controls button{border:none;background-color:#000;color:#fff;font-size:1rem;padding:.6rem .7rem;border-radius:.1rem;cursor:pointer}@media screen and (max-width: 640px){.controls button{font-size:.8rem}}.controls button:hover{background-color:#2c2c2c}.controls .btn-container{display:grid;grid-template-columns:repeat(3, 1fr);gap:.3rem;margin-bottom:.3rem}.controls .travail{width:100%;margin-bottom:.8rem}","",{version:3,sources:["webpack://./src/components/controls/controls.scss"],names:[],mappings:"AAAA,UACE,aAAA,CAEA,sCAHF,UAII,eAAA,CAAA,CAGF,sCAPF,UAQI,eAAA,CAAA,CAGF,qCAXF,UAYI,eAAA,CAAA,CAGF,qCAfF,UAgBI,eAAA,CAAA,CAGF,gBACE,gBAAA,CACA,aAAA,CAGF,oBACE,gBAAA,CACA,mBAAA,CAEA,qCAJF,oBAKI,cAAA,CAAA,CAIJ,iBACE,WAAA,CACA,qBAAA,CACA,UAAA,CACA,cAAA,CACA,mBAAA,CACA,mBAAA,CACA,cAAA,CAEA,qCATF,iBAUI,eAAA,CAAA,CAGF,uBACE,wBAAA,CAIJ,yBACE,YAAA,CACA,oCAAA,CACA,SAAA,CACA,mBAAA,CAGF,mBACE,UAAA,CACA,mBAAA",sourcesContent:[".controls {\n  margin: 0 auto;\n\n  @media screen and (max-width: 1440px) {\n    max-width: 450px;\n  }\n\n  @media screen and (max-width: 1270px) {\n    max-width: 800px;\n  }\n\n  @media screen and (max-width: 840px) {\n    max-width: 600px;\n  }\n\n  @media screen and (max-width: 640px) {\n    max-width: 400px;\n  }\n\n  .logo {\n    font-size: 2.8rem;\n    color: #b58863;\n  }\n\n  .instruct {\n    font-size: 1.2rem;\n    margin-bottom: 0.8rem;\n\n    @media screen and (max-width: 640px) {\n      font-size: 1rem;\n    }\n  }\n\n  button {\n    border: none;\n    background-color: #000;\n    color: #fff;\n    font-size: 1rem;\n    padding: 0.6rem 0.7rem;\n    border-radius: 0.1rem;\n    cursor: pointer;\n\n    @media screen and (max-width: 640px) {\n      font-size: 0.8rem;\n    }\n\n    &:hover {\n      background-color: #2c2c2c;\n    }\n  }\n\n  .btn-container {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 0.3rem;\n    margin-bottom: 0.3rem;\n  }\n\n  .travail {\n    width: 100%;\n    margin-bottom: 0.8rem;\n  }\n}\n"],sourceRoot:""}]);const s=i},66:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".gameboard{display:flex;flex-wrap:wrap;max-width:800px;margin:0 auto}@media screen and (max-width: 840px){.gameboard{max-width:600px}}@media screen and (max-width: 640px){.gameboard{max-width:400px;min-width:400px}}.gameboard .square{width:100px;height:100px;display:flex;justify-content:center;align-items:center;cursor:pointer}@media screen and (max-width: 840px){.gameboard .square{width:75px;height:75px}}@media screen and (max-width: 640px){.gameboard .square{width:50px;height:50px}}.gameboard .square.black{background-color:#b58863}.gameboard .square.black:hover{background-color:#ad7b52}.gameboard .square.white{background-color:#f0d9b5}.gameboard .square.white:hover{background-color:#eccea0}.gameboard .square.end-point{background-color:#c73737}.gameboard .square.end-point:hover{background-color:#c73737}.gameboard .square.visited{background-color:#6495ed}","",{version:3,sources:["webpack://./src/components/gameboard/gameboard.scss"],names:[],mappings:"AAAA,WACE,YAAA,CACA,cAAA,CACA,eAAA,CACA,aAAA,CAEA,qCANF,WAOI,eAAA,CAAA,CAGF,qCAVF,WAWI,eAAA,CACA,eAAA,CAAA,CAGF,mBACE,WAAA,CACA,YAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,cAAA,CAEA,qCARF,mBASI,UAAA,CACA,WAAA,CAAA,CAGF,qCAbF,mBAcI,UAAA,CACA,WAAA,CAAA,CAGF,yBACE,wBAAA,CAEA,+BACE,wBAAA,CAIJ,yBACE,wBAAA,CAEA,+BACE,wBAAA,CAIJ,6BACE,wBAAA,CAEA,mCACE,wBAAA,CAIJ,2BACE,wBAAA",sourcesContent:[".gameboard {\n  display: flex;\n  flex-wrap: wrap;\n  max-width: 800px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 840px) {\n    max-width: 600px;\n  }\n\n  @media screen and (max-width: 640px) {\n    max-width: 400px;\n    min-width: 400px;\n  }\n\n  .square {\n    width: 100px;\n    height: 100px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n\n    @media screen and (max-width: 840px) {\n      width: 75px;\n      height: 75px;\n    }\n\n    @media screen and (max-width: 640px) {\n      width: 50px;\n      height: 50px;\n    }\n\n    &.black {\n      background-color: #b58863;\n\n      &:hover {\n        background-color: darken(#b58863, 5%);\n      }\n    }\n\n    &.white {\n      background-color: #f0d9b5;\n\n      &:hover {\n        background-color: darken(#f0d9b5, 5%);\n      }\n    }\n\n    &.end-point {\n      background-color: #c73737;\n\n      &:hover {\n        background-color: #c73737;\n      }\n    }\n\n    &.visited {\n      background-color: cornflowerblue;\n    }\n  }\n}\n"],sourceRoot:""}]);const s=i},682:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".knight-img{width:50px;height:50px;pointer-events:none}@media screen and (max-width: 640px){.knight-img{width:40px;height:40px}}","",{version:3,sources:["webpack://./src/components/knight/knight-style.scss"],names:[],mappings:"AAAA,YACE,UAAA,CACA,WAAA,CACA,mBAAA,CAEA,qCALF,YAMI,UAAA,CACA,WAAA,CAAA",sourcesContent:[".knight-img {\n  width: 50px;\n  height: 50px;\n  pointer-events: none;\n\n  @media screen and (max-width: 640px) {\n    width: 40px;\n    height: 40px;\n  }\n}\n"],sourceRoot:""}]);const s=i},192:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"*{margin:0;padding:0;box-sizing:border-box}html,body{box-sizing:inherit;font-size:16px;font-family:sans-serif}#board-container{padding:20px;display:flex;justify-content:center;align-items:center;margin-top:3rem;gap:1.5rem}@media screen and (max-width: 1270px){#board-container{flex-direction:column;gap:0;margin-top:0}}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,EACE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,UAEE,kBAAA,CACA,cAAA,CACA,sBAAA,CAGF,iBACE,YAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA,CACA,UAAA,CAEA,sCARF,iBASI,qBAAA,CACA,KAAA,CACA,YAAA,CAAA",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml,\nbody {\n  box-sizing: inherit;\n  font-size: 16px;\n  font-family: sans-serif;\n}\n\n#board-container {\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 3rem;\n  gap: 1.5rem;\n\n  @media screen and (max-width: 1270px) {\n    flex-direction: column;\n    gap: 0;\n    margin-top: 0;\n  }\n}\n"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var A=n[s],c=r.base?A[0]+r.base:A[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var m=t(l),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var u=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:u,references:1})}i.push(l)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var A=r(n,o),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{const n=t.p+"5083acef0e50c651bbe8.png";var e=t(379),r=t.n(e),o=t(795),a=t.n(o),i=t(569),s=t.n(i),A=t(565),c=t.n(A),d=t(216),l=t.n(d),m=t(589),p=t.n(m),u=t(682),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=l(),r()(u.Z,h),u.Z&&u.Z.locals&&u.Z.locals;const C=()=>{const e=document.createElement("img");return e.src=n,e.setAttribute("class","knight-img"),e};var f=t(66),g={};g.styleTagTransform=p(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=l(),r()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;const x=C();let b=!1,v="",w="",y="",E="";const B=C(),k=n=>new Promise((e=>setTimeout(e,n))),L=(n,e)=>n>=0&&e>=0&&n<8&&e<8;var q=t(453),I={};I.styleTagTransform=p(),I.setAttributes=c(),I.insert=s().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=l(),r()(q.Z,I),q.Z&&q.Z.locals&&q.Z.locals;const F=(n,e,t)=>{const r=document.createElement(n);return r.textContent=e,t&&r.classList.add(t),r},S=()=>{const n=document.createElement("div");n.classList.add("controls");const e=document.createElement("div");e.classList.add("btn-container");const t=F("h1","Knight Travails","logo"),r=F("p","Select spot on board to place knight or generate a random spot to place knight","instruct"),o=F("button","Randomly Select","random"),a=F("button","Select End Point","end-point-btn"),i=F("button","Travail","travail"),s=F("button","Clear","clear");return o.addEventListener("click",(()=>{const n=[...document.querySelector(".gameboard").children];n.forEach((n=>{if(n.children)for(;n.firstChild;)n.removeChild(n.firstChild)}));const e=Math.floor(7*Math.random())+1,t=Math.floor(7*Math.random())+1;n.forEach((n=>{const{row:r,col:o}=n.dataset;if(+r===e&&+o===t)return n.classList.contains("end-point")&&n.classList.remove("end-point"),n.appendChild(x),v=+n.dataset.col,void(w=+n.dataset.row)}))})),s.addEventListener("click",(()=>{[...document.querySelector(".gameboard").children].forEach((n=>{if(n.classList.contains("end-point")&&n.classList.remove("end-point"),n.classList.contains("visited")&&n.classList.remove("visited"),n.children)for(;n.firstChild;)n.removeChild(n.firstChild)})),y="",E="",v="",w="",b=!1})),a.addEventListener("click",(()=>{b=!0})),i.addEventListener("click",(()=>{if(""!==v&&""!==w&&""!==y&&""!==E){(async n=>{for(let e=1;e<n.length;e++){const[t,r]=n[e],o=document.querySelector(`[data-row="${t}"][data-col="${r}"]`);if(e===n.length-1&&(o.classList.add("visited"),o.textContent=e),o.appendChild(B),e>0){const[t,r]=n[e-1],o=document.querySelector(`[data-row="${t}"][data-col="${r}"]`);for(;o.firstChild;)o.removeChild(o.firstChild);o.classList.add("visited"),e-1>0&&(o.textContent=e-1)}await k(750)}})(((n,e,t,r)=>{const o=[];o.push({row:n,col:e,distance:0,path:[[n,e]]});const a=Array(8).fill().map((()=>Array(8).fill(!1))),i=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(a[n][e]=!0;o.length>0;){const{row:n,col:e,distance:s,path:A}=o.shift();if(n===t&&e===r)return A;for(let t=0;t<i.length;t++){const[r,c]=i[t],d=n+r,l=e+c;if(L(d,l)&&!a[d][l]){a[d][l]=!0;const n=[...A,[d,l]];o.push({row:d,col:l,distance:s+1,path:n})}}}return[]})(w,v,E,y))}})),e.append(o,a,s),n.append(t,r,e,i),n};var T=t(192),Z={};Z.styleTagTransform=p(),Z.setAttributes=c(),Z.insert=s().bind(null,"head"),Z.domAPI=a(),Z.insertStyleElement=l(),r()(T.Z,Z),T.Z&&T.Z.locals&&T.Z.locals,function(){const n=document.getElementById("board-container"),e=S(),t=(()=>{const n=document.createElement("div");n.classList.add("gameboard");let e=!1;for(let t=0;t<8;t++){for(let r=0;r<8;r++){const o=document.createElement("div");o.classList.add("square"),e?o.classList.add("white"):o.classList.add("black"),o.dataset.row=t,o.dataset.col=r,n.appendChild(o),e=!e,o.addEventListener("click",(e=>{const t=e.target;if(b){if(n.childNodes.forEach((n=>{n.classList.contains("end-point")&&n.classList.remove("end-point")})),t.firstChild)for(;t.firstChild;)t.removeChild(t.firstChild);t.classList.add("end-point"),y=+t.dataset.col,E=+t.dataset.row,b=!1}else n.childNodes.forEach((n=>{n.childNode===x&&n.removeChild()})),t.classList.contains("end-point")&&t.classList.remove("end-point"),t.appendChild(x),v=+t.dataset.col,w=+t.dataset.row}))}e=!e}return n})();n.append(e,t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,